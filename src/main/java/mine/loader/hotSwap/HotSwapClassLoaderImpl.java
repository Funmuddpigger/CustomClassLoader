package mine.loader.hotSwap;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/** * @author ：LJJ * @description：TODO * @date ：2023/12/21 17:17 */public class HotSwapClassLoaderImpl extends ClassLoader {    /**     * 系统根路径     */    private String rootPath;    /**     * 加载的类（重新加载的类，包括动态加载的，调用自己加载器加载的）     */    private List<String> clazzs;    public HotSwapClassLoaderImpl(String rootPath,String... classPaths) throws IOException {        this.rootPath = rootPath;        /**         * 初始化java.util.ArrayList，而不是Arrays的内部类ArraysList         */        this.clazzs = new ArrayList<>(16);        //遍历类文件，直接方法        for (String path0 : classPaths){            loadClassPath(new File(path0));        }    }    /**     * 加载class路径文件     * @param file     */    public void loadClassPath(File file) throws IOException {        //如果是目录        if(file.isDirectory()&&file.listFiles()!=null){            //遍历            for(File file0 : file.listFiles()){                loadClassPath(file0);            }        }        //如果是文件，且是class文件则加载        else{            String fileName = file.getName();            String filePath = file.getPath();            //截取文件后缀名            String endName = fileName.substring(fileName.lastIndexOf(".") + 1);            //判断class类型            if("class".equals(endName)){                //加载class文件                FileInputStream fileInputStream = new FileInputStream(file);                //读取文件,bytes就是存放 class文件里的字节码                byte[] bytes = new byte[(int) file.length()];                //把file 这个文件里的内容存入到bytes数组（转换为字节码）                fileInputStream.read(bytes);                //转换路径                String className = filePathToClassName(filePath);                //记录已经被加载过的class                clazzs.add(className);                //加载类，执行defineClass把加载好的类加入到jvm中                defineClass(className,bytes,0,bytes.length);            }        }    }    private String filePathToClassName(String filePath) {        //第一个replace先把文件根路径替换掉了，第二个replace把\\路径替换为.        String className = filePath.replace(rootPath, "").replaceAll("\\\\", ".");        className = className.substring(0, className.lastIndexOf("."));        className = className.substring(1);        return className;    }    @Override    public Class<?> loadClass(String name) throws ClassNotFoundException {        //查找该类是否已经加载过了        Class<?> cls = findLoadedClass(name);        //如果没有加载，则进行加载        if(cls==null){            /**             * 查看自己的加载器有无加载这个class             *  1.如果找不到，则往其他父类加载器上找 APP -> Ext -> BootStrap             *  2.如果存在于我们”已经加载的集合“去找不到该类，证明该类无法被加载             */            if(!clazzs.contains(name)){                cls = getSystemClassLoader().loadClass(name);            }else{                throw new ClassNotFoundException("无法加载类： "+ name);            }        }        return cls;    }    public static void main(String[] args) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InterruptedException {        //循环监听(类似于一个reload的接口)        while(true){            String rootPath = HotSwapClassLoaderImpl.class.getResource("/").getPath().replaceAll("%20"," ");            rootPath = new File(rootPath).getPath();            /**             * 用自定义加载器加载/mine包下面的类             */            HotSwapClassLoaderImpl classLoader = new HotSwapClassLoaderImpl(rootPath, rootPath + "/mine/loader/hotSwap");            Class<?> aClass = classLoader.loadClass("mine.loader.hotSwap.HotSwapTest");            Object o = aClass.newInstance();            aClass.getMethod("testHotSwap").invoke(o);            Thread.sleep(2000);        }    }}